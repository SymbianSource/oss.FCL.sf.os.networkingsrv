1.1      "Restart Timer default is 3 seconds (with Configure-Requests)\n"
comment: default parameters


1.2      "Restart Timer default is 3 seconds (with Terminate-Requests)\n"
comment: default parameters


1.3		"- ANVL: Configure Restart Timer to be different than 3 seconds\n"
default:
PPPEnableRestartTimer = 0 //:disabled - 1:enabled
PPPRestartPeriod= 3000 //default 3 Seconds
now:
[lcp]
PPPEnableRestartTimer = 1
PPPRestartPeriod= 6000


1.4		"Max Terminate default is 2\n"
comment: in the test code we extend this timer
default:
PPPEnableRestartTimer = 0 //:disabled - 1:enabled
PPPRestartPeriod= 3000 //default 3 Seconds
now:
[lcp]
PPPEnableRestartTimer = 1
PPPRestartPeriod= 30000

comment: The default Max Terminate in the code is 10. Hence this test will fail.


1.5     "Max Terminate MUST be configurable\n"
comment: in the test code we extend this timer
default:
PPPEnableRestartTimer = 0 //:disabled - 1:enabled
PPPRestartPeriod= 3000 //default 3 Seconds
now:
[lcp]
PPPEnableRestartTimer = 1
PPPRestartPeriod= 30000

comment: The default Max Terminate in the code is 10. Hence this test should pass since it is defferent that the default 2.


1.6     "Max Configure default is 10\n"
comment: this value in the code is by default 10, but the ini files looks like this:
[lcp]
PPPEnableMaxRestart = 0 //:disabled - 1:enabled
PPPMaxRestartCount = 20 //default


1.7     "Max Configure MUST be configurable\n"
note that the default in the code and the ini file differs:10 in the code, 20 in the ini file
default:
PPPEnableMaxRestart = 0 //:disabled - 1:enabled
PPPMaxRestartCount = 20 //default
now:
[lcp]
PPPEnableMaxRestart = 1
PPPMaxRestartCount = 5


1.8     "Max Failure default is 5\n"
comment: the value in the code is by default is 5


1.9     "Max Failure MUST be configurable\n"
default:
PPPEnableMaxFailure = 0 //:disabled  - 1:enabled
PPPMaxFailureCount = 5 //default
now:
[lcp]
PPPEnableMaxFailure = 1
PPPMaxFailureCount = 2


3.1      "An implementation wishing to open connection MUST transmit a Configure-Request\n"
comment: default parameters

3.3     "The Identifier field MUST be changed whenever the content of the Options field changes.\n"
default:
PPPEnableMru= 1
PPPMru= 1500
now:
PPPEnableMru= 1
PPPMru= 576


3.4      "Upon reception of Configure-Request, an appropriate reply MUST be transmitted.\n",
comment: default parameters


3.5      "Configure-Requests with bad lengths are ignored\n"
comment: default parameters


3.6      "Configuration Options SHOULD NOT be included with default values\n"
default:
PPPEnableMru= 1
PPPMru= 1500
now:
[link]
PPPEnableMru= 1
PPPMru= 576


4.1      "If every Option and value received in Configure-Request is recognizable then the implementation MUST transmit Configure-Ack\n"
comment: default parameters


4.2      "Discard Configure-Acks whose Identifier and/or Option fields do not match those of the Configure-Request.\n"
comment: default parameters


4.3     "The Options in the Configure-Ack contains the Options field copied from the Configure-Request\n"
comment: default parameters


4.4      "A Configure-Ack with invalid Options should be discarded\n"
default:
[link]
PPPEnableAccm= 1
PPPAccm= FFFFFF0F // The example below would enable accm config and negate the need to escape values 4 - 7 inclusive
now:
[link]
PPPEnableAccm= 1
PPPAccm= 0xA5A5A5A5


4.5      "Configure-Ack with bad length is discarded\n"
comment: default parameters


4.6      "Unsolicited Configure-Acks are discarded\n"
comment: default parameters


5.1     "If all Options are known, but some have unacceptable values a Configure-Nak is sent with appropriate values indicated\n"
comment: default parameters


5.2      "Options which have no value fields (boolean Options) MUST use the Configure-Reject reply instead.\n"
comment: default parameters


5.4     "If Identifier in Configure-Nak does not match that of the last Configure-Request it MUST be discarded\n"
comment: default parameters
comment: says that we have to open a connection with a magic number option. How do we do that?


5.5     "Reception of Configure-Nak indicates that new Configure-Request MAY be sent with the Options modified as in the Configure-Nak\n"
default:
PPPEnableMru= 1
PPPMru= 1500
now:
[link]
PPPEnableMru= 1
PPPMru= 576


5.6     "A Configure-Nak may contain Options with default values if different from the Configure-Request\n",
default:
PPPEnableMru= 1
PPPMru= 1500
now:
[link]
PPPEnableMru= 1
PPPMru= 576


5.9     "Unsolicited Configure-Naks are discarded\n"
comment: default parameters


5.10     "Configure-Nak with bad length is discarded\n"
comment: default parameters


5.11     "Configure-Nak with no Options should be ignored\n"
comment: default parameters


6.1     "If Options received in Configure-Request are not acceptable for negotiation then Configure-Reject MUST be sent\n"
comment: default parameters


6.2     "Invalid Configure-Rejects are discarded\n"
comment: default parameters


6.3     "A Configure-Request with none of the rejected Options should be sent when valid Configure-Reject is received\n"
default:
[link]
PPPEnableAccm= 1
PPPAccm= FFFFFF0F // The example below would enable accm config and negate the need to escape values 4 - 7 inclusive
now:
[link]
PPPEnableAccm= 1
PPPAccm= 0xA5A5A5A5


6.4     "Configure-Rejects with bad lengths should be discarded\n"
comment: default parameters


6.5     "Configure-Reject with no Options should be ignored\n"
comment: default parameters


6.6     "Unsolicited Configure-Rejects are discarded\n"
comment: default parameters


7.1     "A LCP implementation wishing to close connection SHOULD transmit a LCP packet with the Code field set to 5 (Terminate-Request)\n"
comment: default parameters


7.2     "Terminate-Request packets SHOULD continue to be sent until Terminate-Ack is received.\n"
comment: default parameters


7.3     "Terminate-Request packets SHOULD continue to be sent until the lower layer indicates that it has gone down.\n"
comment: default parameters


7.4     "Terminate-Request packets SHOULD continue to be sent until a sufficiently large number have been transmitted\n"
comment: default parameters


7.5     "Upon reception of Terminate-Request, a Terminate-Ack MUST be transmitted\n"
comment: default parameters


7.7     "An unelicited Terminate-Ack means peer is in need of renegotiation\n"
comment: default parameters


7.9     "Bad length Terminate-Request packets should be discarded\n"
comment: default parameters


7.10     "Bad length Terminate-Ack packets should be discarded\n"
comment: default parameters


8.1     "Reception of a LCP packet with an invalid Code MUST be reported by transmitting a Code-Reject\n"
comment: default parameters


8.2     "The Identifier field MUST be changed for each Code-Reject sent.\n"
comment: default parameters


8.3     "The Rejected-Information MUST be truncated to comply with the peer's established MRU.\n"
comment: default parameters


8.4     "Unsolicited Code-Reject should be discarded\n"
comment: default parameters


8.5     "Bad length Code-Reject packets should be discarded\n"
comment: default parameters


8.6     "A Code-Reject of a packet such as an Echo-Reply communicates an unrecoverable error that terminates the connection\n"
comment: default parameters


9.1     "Reception of a PPP packet with an unknown Protocol field MUST be reported back to the peer by transmitting a Protocol-Reject\n"
comment: default parameters


9.2     "Upon reception of a Protocol-Reject, the implementation MUST stop sending packets of the indicated protocol\n"
comment: default parameters, think so.
comment: Did not really understand this test.


9.3     "The Identifier field MUST be changed for each Protocol-Reject sent.\n"
comment: default parameters


9.4     "The Rejected-Information MUST be truncated to comply with the peer's established MRU.\n"
comment: default parameters


9.5     "Protocol-Reject of LCP should cause full connection shutdown\n"
comment: default parameters


9.6     "Protocol-Rejects with bad lengths should be ignored\n"
comment: default parameters


9.7     "Discard Protocol-Reject with unknown protocol\n"
comment: default parameters


9.8     "Protocol-Reject packets can only be sent in the LCP Opened state\n"
comment: default parameters


9.9     "Protocol-Reject of LCP (RXJ- in state 2-9) causes full shutdown\n"
comment: default parameters


9.10     "Protocol-Reject packets received in any state other than LCP Opened SHOULD be silently discarded\n"
comment: default parameters


10.1     "Echo-Request fields correctly filled in\n"
comment: default parameters
comment, need to get DUT to send echo request.


10.2     "Upon reception of an Echo-Request, a correctly formatted Echo-Reply is sent\n"
comment: default parameters


10.3     "On transmission, the Identifier field MUST be changed whenever a valid reply has been received for a previous request.\n"
comment: default parameters
comment, need to get DUT to send echo request.


10.4     "Echo-Request and Echo-Reply packets MUST only be sent in the LCP Opened state; any received when not in that state are discarded.\n"
comment: default parameters
comment, need to get DUT to send echo request.


10.5     "Echo-Reply Data must be truncated to accommodate peer's MRU\n"
comment: default parameters


10.6     "Unsolicited Echo-Reply is discarded\n"
comment: default parameters


10.7     "Echo-Reply with Identifier different from Echo-Request is ignored\n"
comment: default parameters
comment, need to get DUT to send echo request.


10.8     "Echo-Requests with non-zero Magic-Numbers are discarded when Magic-Number has not been negotiated\n"
comment: default parameters


10.9     "Echo-Requests with bad Magic-Numbers are discarded when Magic-Number has been negotiated\n"
comment: default parameters
comment: says that we have to open a connection with a magic number option. How do we do that?


10.10     "Echo-Requests with bad lengths are discarded\n"
comment: default parameters


10.11     "Echo-Requests should be retransmitted if no Echo-Reply is received\n"
comment: default parameters
comment, need to get DUT to send echo request.


10.12     "Echo-Replies with non-zero Magic-Numbers are discarded when Magic-Number has not been negotiated\n"
comment: default parameters
comment, need to get DUT to send echo request.


10.13     "Echo-Replies with bad Magic-Numbers are discarded when Magic-Number has been negotiated\n"
comment, need to get DUT to send echo request.
comment: says that we have to open a connection with a magic number option. How do we do that?


10.14     "Echo-Replies with bad lengths are discarded\n"
comment: default parameters
comment, need to get DUT to send echo request.


12.1     "Validate format of Maximum-Receive-Unit Option fields\n"
default:
PPPEnableMru= 1
PPPMru= 1500
now:
PPPEnableMru= 1
PPPMru= 576


12.2     "Check Maximum-Receive-Unit Option is functional\n"
comment: long test. Seems to be really in 2 parts.
default:
PPPEnableMru= 1
PPPMru= 1500
now:
PPPEnableMru= 1
PPPMru= 576


12.3     "The default Maximum-Receive-Unit is 1500 octets.\n"
comment: default parameters


12.4     "If a Maximum-Receive-Unit of less than 1500 is negotiated, packets of length 1500 must still be accepted\n"
default:
PPPEnableMru= 1
PPPMru= 1500
now:
PPPEnableMru= 1
PPPMru= 576


12.6     "A Maximum-Receive-Unit of less than 4 should not be allowed\n"
comment: default parameters


12.7	 "If an Option is received (MRU) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted unless the Length goes beyond the end of the packet\n"
comment: default parameters


13.1     "Validate format of Async-Control-Character-Map Option fields\n",
default:
[link]
PPPEnableAccm= 1
PPPAccm= FFFFFF0F // The example below would enable accm config and negate the need to escape values 4 - 7 inclusive
now:
[link]
PPPEnableAccm= 1
PPPAccm= 0xA5A5A5A5


13.2     "Validate functionality of Async-Control-Character-Map Option\n"
comment: default parameters


13.3	 "If an Option is received (ACCM) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted unless the Length goes beyond the end of the packet\n"
comment: default parameters


14.1     "Validate format of Authentication-Protocol Option fields\n"
comment: we have to enable PAP on the DUT side. How do we do that?


14.2     "An implementation MUST NOT include multiple Authentication-Protocol Configuration Options in its Configure-Request packets.\n"
comment: long test. Seems to be really in 2 parts.
comment: we have to enable PAP on the DUT side. How do we do that?


14.5	 "If an Option is received (Auth Protocol) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted unless the Length goes beyond the end of the packet\n"
comment: default parameters


15.1     "Validate format of Quality-Protocol Option fields\n"
comment: we must here set the LQM. How do we do that? What is it?


15.4	 "If an Option is received (Quality Protocol) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted\n"
comment: default parameters


16.1     "Validate format of Magic-Number Option fields\n"
comment: says that we have to open a connection with a magic number option. How do we do that?


16.2     "A Magic-Number of zero is illegal and MUST always be Nak'd, if it is not Rejected outright.\n"
comment: default parameters


16.3     "If Magic-Number Option in a received Configure-Request is different than the last Magic-Number Option sent, it SHOULD be acknowleged\n"
comment: says that we have to open a connection with a magic number option. How do we do that?


16.4     "If a received Configure-Request has the same Magic-Number Option as the last Configure-Request sent, MUST send Configure-Nak\n"
comment: says that we have to open a connection with a magic number option. How do we do that?


16.5     "A new Configure-Request SHOULD NOT be sent to the peer until normal processing would cause it to be sent\n"
comment: says that we have to open a connection with a magic number option. How do we do that?


16.7	 "If Magic-Number requested, MUST NOT reject request for Magic-Number\n"
comment: says that we have to open a connection with a magic number option. How do we do that?


16.8     "If Magic-Number Option is rejected, it SHOULD be treated as if a Configure-Ack had been received\n"
comment: says that we have to open a connection with a magic number option. How do we do that?


16.10	 "If an Option is received (Magic Number) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted unless the Length goes beyond the end of the packet\n"
comment: default parameters


17.1     "Validate format of Protocol-Field-Compression Option fields\n"
comment: must enable Protocol-Field-Compression. How do we do that?


17.2     "When negotiated, PPP implementations MUST accept PPP packets with either double-octet or single-octet Protocol fields\n"
comment: must enable Protocol-Field-Compression. How do we do that?


17.3     "Reject single-octet Protocol fields when compression not negotiated\n"
comment: must _disable_ Protocol-Field-Compression. How do we do that?


17.5     "When a Protocol field is compressed, the Data Link Layer FCS field is calculated on the compressed frame, not the original frame.\n"
comment: must enable Protocol-Field-Compression. How do we do that?


17.6	 "If an Option is received (PFC) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted unless the Length goes beyond the end of the packet\n"
comment: default parameters


18.1     "Validate format of Address-and-Control-Field-Compression Option fields\n"
comment: configure DUT to use ACFC Option Fields. How do we do that?


18.2     "Validate correct functioning of Address and Control field compression\n"
comment: configure DUT to use ACFC Option Fields. How do we do that?


18.3     "The Address and Control fields MUST NOT be compressed when sending any LCP packet; this rule guarantees unambiguous recognition of LCP's\n"
comment: configure DUT to use ACFC Option Fields. How do we do that?


18.4     "When Address and Control fields are compressed, the Data Link Layer Layer FCS field is calculated on compressed frame, not the original\n"
comment: configure DUT to use ACFC Option Fields. How do we do that?


18.5	 "If an Option is received (ACFC) in a Configure-Request but with an incorrect Length, a Configure-Nak SHOULD be transmitted unless the Length goes beyond the end of the packet\n"
comment: default parameters


19.1	 "None of the Configuration Options in this specification can be listed more than once.\n"
comment: default parameters


20.1     "Try to send packets with bad FCS\n"
comment: IPCP connection has to be made? How do we do that?Echo?
comment: default parameters

20.2     "Send an HDLC packet of 100K to try to overflow input buffers\n"
comment: default parameters


20.3     "If using Echo-Requests to monitor link quality, DUT should terminate link after some number of Echo-Replies are not received\n"
comment: test wants DUT to: Send n periodic Echo-Requests to verify link is up
comment: how do we send periodic messages from DUT?


20.4     "Ensure that when a Config-Ack is sent before Max Configure is reached, a Connection can be properly established\n"
comment: default parameters


20.5     "Ensure that when a Config-Ack is sent after the Restart Timer that a Config-Req is retransmitted\n"
comment: default parameters

