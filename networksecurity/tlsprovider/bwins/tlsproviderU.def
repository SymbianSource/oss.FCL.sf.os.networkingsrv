EXPORTS
	??1CTLSProvider@@UAE@XZ @ 1 NONAME ; public: virtual __thiscall CTLSProvider::~CTLSProvider(void)
	??1CTLSSession@@UAE@XZ @ 2 NONAME ; public: virtual __thiscall CTLSSession::~CTLSSession(void)
	?Attributes@CTLSProvider@@QAEPAVCTlsCryptoAttributes@@XZ @ 3 NONAME ; public: class CTlsCryptoAttributes * __thiscall CTLSProvider::Attributes(void)
	?Attributes@CTLSSession@@QAEPAVCTlsCryptoAttributes@@XZ @ 4 NONAME ; public: class CTlsCryptoAttributes * __thiscall CTLSSession::Attributes(void)
	?CancelRequest@CTLSProvider@@QAEXXZ @ 5 NONAME ; public: void __thiscall CTLSProvider::CancelRequest(void)
	?CancelRequest@CTLSSession@@QAEXXZ @ 6 NONAME ; public: void __thiscall CTLSSession::CancelRequest(void)
	?CertificateVerifySignatureL@CTLSSession@@QAEXPAVCMessageDigest@@0AAPAVHBufC8@@AAVTRequestStatus@@@Z @ 7 NONAME ; public: void __thiscall CTLSSession::CertificateVerifySignatureL(class CMessageDigest *,class CMessageDigest *,class HBufC8 * &,class TRequestStatus &)
	?CipherSuitesL@CTLSProvider@@QAEXAAV?$RArray@VTTLSCipherSuite@@@@AAVTRequestStatus@@@Z @ 8 NONAME ; public: void __thiscall CTLSProvider::CipherSuitesL(class RArray<class TTLSCipherSuite> &,class TRequestStatus &)
	?ClearSessionCacheL@CTLSProvider@@QAEXAAVTTLSSessionNameAndID@@AAVTRequestStatus@@@Z @ 9 NONAME ; public: void __thiscall CTLSProvider::ClearSessionCacheL(class TTLSSessionNameAndID &,class TRequestStatus &)
	?ClientCertificate@CTLSSession@@QAEXAAPAVCX509Certificate@@AAVTRequestStatus@@@Z @ 10 NONAME ; public: void __thiscall CTLSSession::ClientCertificate(class CX509Certificate * &,class TRequestStatus &)
	?ClientCertificate@CTLSSession@@QAEXAAPAVHBufC8@@AAVTRequestStatus@@@Z @ 11 NONAME ; public: void __thiscall CTLSSession::ClientCertificate(class HBufC8 * &,class TRequestStatus &)
	?ClientFinishedMsgL@CTLSSession@@QAEXPAVCMessageDigest@@0AAPAVHBufC8@@AAVTRequestStatus@@@Z @ 12 NONAME ; public: void __thiscall CTLSSession::ClientFinishedMsgL(class CMessageDigest *,class CMessageDigest *,class HBufC8 * &,class TRequestStatus &)
	?ClientKeyExchange@CTLSSession@@QAEXAAPAVHBufC8@@AAVTRequestStatus@@@Z @ 13 NONAME ; public: void __thiscall CTLSSession::ClientKeyExchange(class HBufC8 * &,class TRequestStatus &)
	?ConnectL@CTLSProvider@@SAPAV1@XZ @ 14 NONAME ; public: static class CTLSProvider * __cdecl CTLSProvider::ConnectL(void)
	?CreateL@CTLSProvider@@QAEXAAPAVCTLSSession@@AAVTRequestStatus@@@Z @ 15 NONAME ; public: void __thiscall CTLSProvider::CreateL(class CTLSSession * &,class TRequestStatus &)
	?DecryptAndVerifyL@CTLSSession@@QAEHABVTDesC8@@AAPAVHBufC8@@AA_JAAW4TRecordProtocol@@@Z @ 16 NONAME ; public: int __thiscall CTLSSession::DecryptAndVerifyL(class TDesC8 const &,class HBufC8 * &,long long &,enum TRecordProtocol &)
	?EncryptL@CTLSSession@@QAEHABVTDesC8@@AAPAVHBufC8@@AA_JAAW4TRecordProtocol@@@Z @ 17 NONAME ; public: int __thiscall CTLSSession::EncryptL(class TDesC8 const &,class HBufC8 * &,long long &,enum TRecordProtocol &)
	?GenerateRandom@CTLSProvider@@QAEXAAVTDes8@@@Z @ 18 NONAME ; public: void __thiscall CTLSProvider::GenerateRandom(class TDes8 &)
	?GetSessionL@CTLSProvider@@QAEXAAVTTLSServerAddr@@AAV?$TBuf8@$0CA@@@AAVTRequestStatus@@@Z @ 19 NONAME ; public: void __thiscall CTLSProvider::GetSessionL(class TTLSServerAddr &,class TBuf8<32> &,class TRequestStatus &)
	?NewL@CTLSSession@@SAPAV1@PAVCTlsSessionImpl@@@Z @ 20 NONAME ; public: static class CTLSSession * __cdecl CTLSSession::NewL(class CTlsSessionImpl *)
	?ReConnectL@CTLSProvider@@QAEXXZ @ 21 NONAME ; public: void __thiscall CTLSProvider::ReConnectL(void)
	?ServerCertificate@CTLSSession@@QAEXAAPAVCX509Certificate@@AAVTRequestStatus@@@Z @ 22 NONAME ; public: void __thiscall CTLSSession::ServerCertificate(class CX509Certificate * &,class TRequestStatus &)
	?TLSPRFComputationsL@CTlsEncrypt@@SAXABVTDesC8@@0ABW4TTLSMACAlgorithm@@HAAVTDes8@@@Z @ 23 NONAME ; public: static void __cdecl CTlsEncrypt::TLSPRFComputationsL(class TDesC8 const &,class TDesC8 const &,enum TTLSMACAlgorithm const &,int,class TDes8 &)
	?TLSPRFL@CTlsEncrypt@@SAXABVTDesC8@@0HAAVTDes8@@@Z @ 24 NONAME ; public: static void __cdecl CTlsEncrypt::TLSPRFL(class TDesC8 const &,class TDesC8 const &,int,class TDes8 &)
	?TlsSessionPtr@CTLSProvider@@QAEPAVCTLSSession@@XZ @ 25 NONAME ; public: class CTLSSession * __thiscall CTLSProvider::TlsSessionPtr(void)
	?VerifyServerCertificate@CTLSProvider@@QAEXABVTDesC8@@AAPAVCX509Certificate@@AAVTRequestStatus@@@Z @ 26 NONAME ; public: void __thiscall CTLSProvider::VerifyServerCertificate(class TDesC8 const &,class CX509Certificate * &,class TRequestStatus &)
	?VerifyServerFinishedMsgL@CTLSSession@@QAEXPAVCMessageDigest@@0ABVTDesC8@@AAVTRequestStatus@@@Z @ 27 NONAME ; public: void __thiscall CTLSSession::VerifyServerFinishedMsgL(class CMessageDigest *,class CMessageDigest *,class TDesC8 const &,class TRequestStatus &)
	?VerifySignatureL@CTLSProvider@@QAEHABVCSubjectPublicKeyInfo@@ABVTDesC8@@1@Z @ 28 NONAME ; public: int __thiscall CTLSProvider::VerifySignatureL(class CSubjectPublicKeyInfo const &,class TDesC8 const &,class TDesC8 const &)
	?KeyDerivation@CTLSSession@@QAEHABVTDesC8@@ABVTTLSMasterSecretInput@@AAVTDes8@@@Z @ 29 NONAME ; int CTLSSession::KeyDerivation(class TDesC8 const &, class TTLSMasterSecretInput const &, class TDes8 &)
	?ClientCertificate@CTLSSession@@QAEXPAV?$RPointerArray@VHBufC8@@@@AAVTRequestStatus@@@Z @ 30 NONAME ; void CTLSSession::ClientCertificate(class RPointerArray<class HBufC8> *, class TRequestStatus &)

