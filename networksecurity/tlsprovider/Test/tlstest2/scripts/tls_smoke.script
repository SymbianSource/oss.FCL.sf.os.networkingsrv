//
// Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
// All rights reserved.
// This component and the accompanying materials are made available
// under the terms of "Eclipse Public License v1.0"
// which accompanies this distribution, and is available
// at the URL "http://www.eclipse.org/legal/epl-v10.html".
//
// Initial Contributors:
// Nokia Corporation - initial contribution.
//
// Contributors:
//
// Description:
//

LOAD_SUITE tlstest2

RUN_SCRIPT z:\TestData\scripts\te_esock_test_unloadesockForced.script
ced z:\testdata\configs\Tls_ethernet.xml
RUN_SCRIPT z:\TestData\scripts\te_esock_test_loadesock.script

RUN_UTILS MkDir c:\private\101f72a6
RUN_UTILS DeleteFile c:\private\101f72a6\CACerts.dat 
RUN_UTILS MakeReadWrite c:\private\101f72a6\certclients.dat
RUN_UTILS DeleteFile c:\private\101f72a6\certclients.dat
RUN_UTILS MakeReadWrite c:\private\101f72a6\keys.dat
RUN_UTILS DeleteFile c:\private\101f72a6\keys.dat
RUN_UTILS CopyFile z:\testdata\configs\tlsprovtestdata\KeyAndCertStore\cacerts.dat c:\private\101f72a6\CACerts.dat
RUN_UTILS CopyFile z:\testdata\configs\tlsprovtestdata\KeyAndCertStore\certclients.dat    c:\private\101f72a6\certclients.dat
RUN_UTILS CopyFile z:\testdata\configs\tlsprovtestdata\KeyAndCertStore\keys.dat c:\private\101f72a6\keys.dat


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0021
//! @SYMTestCaseDesc 	StartupComms

START_TESTCASE SEC-TLSP-SMOKE-0021
RUN_TEST_STEP 100 tlstest2 StartupCommsStep
END_TESTCASE SEC-TLSP-SMOKE-0021


//********************** SEC-TLS-SMOKE : Full TLS handshake tests **********************

//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0001
//! @SYMTestCaseDesc 	TLS handshake with TLS_PSK_WITH_AES_128_CBC_SHA cipher suit
//!			(TLS_PSK_WITH_AES_128_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_PSK_WITH_AES_128_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8632, REQ8637, REQ8638, REQ8639
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_PSK_WITH_AES_128_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0001
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_PSK_WITH_AES_128_CBC_SHA
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_PSK_WITH_AES_128_CBC_SHA_NOCALLBACK
END_TESTCASE SEC-TLSP-SMOKE-0001


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0002
//! @SYMTestCaseDesc 	TLS handshake with TLS_PSK_WITH_3DES_EDE_CBC_SHA cipher suit
//!			(TLS_PSK_WITH_3DES_EDE_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_PSK_WITH_3DES_EDE_CBC_SHA suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8632, REQ8637, REQ8638, REQ8639
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_PSK_WITH_3DES_EDE_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0002 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_PSK_WITH_3DES_EDE_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0002 



//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0003
//! @SYMTestCaseDesc 	TLS handshake with TLS_PSK_WITH_RC4_128_SHA cipher suit
//!			(TLS_PSK_WITH_RC4_128_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_PSK_WITH_RC4_128_SHA suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8632, REQ8637, REQ8638, REQ8639, REQ8640
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_PSK_WITH_RC4_128_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0003 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_PSK_WITH_RC4_128_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0003 

//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0004
//! @SYMTestCaseDesc 	TLS handshake with TLS_PSK_WITH_AES_256_CBC_SHA cipher suit
//!			(TLS_PSK_WITH_AES_256_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                   	TLS_PSK_WITH_AES_256_CBC_SHA suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8632, REQ8637, REQ8638, REQ8639, REQ8640
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_PSK_WITH_AES_256_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0004 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_PSK_WITH_AES_256_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0004 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0005
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_EXPORT_WITH_RC4_40_MD5 cipher suit
//!			(TLS_RSA_EXPORT_WITH_RC4_40_MD5)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_EXPORT_WITH_RC4_40_MD5 cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_EXPORT_WITH_RC4_40_MD5 is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0005 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_EXPORT_WITH_RC4_40_MD5 
END_TESTCASE SEC-TLSP-SMOKE-0005 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0006
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_WITH_RC4_128_MD5 cipher suit
//!			(TLS_RSA_WITH_RC4_128_MD5)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_WITH_RC4_128_MD5 cipher suit. 
//!		
//! @SYMPREQ PREQ1294
//! @SYMREQ  REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_WITH_RC4_128_MD5 is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0006 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_WITH_RC4_128_MD5 
END_TESTCASE SEC-TLSP-SMOKE-0006 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0007
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_WITH_RC4_128_SHA cipher suit
//!			(TLS_RSA_WITH_RC4_128_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_WITH_RC4_128_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_WITH_RC4_128_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0007 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_WITH_RC4_128_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0007 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0008
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_EXPORT_WITH_DES40_CBC_SHA cipher suit
//!			(TLS_RSA_EXPORT_WITH_DES40_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_EXPORT_WITH_DES40_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_EXPORT_WITH_DES40_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0008 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_EXPORT_WITH_DES40_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0008 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0009
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_WITH_DES_CBC_SHA cipher suit
//!			(TLS_RSA_WITH_DES_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_WITH_DES_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_WITH_DES_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0009 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_WITH_DES_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0009 

//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0010
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher suit
//!			(TLS_RSA_WITH_3DES_EDE_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_WITH_3DES_EDE_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_WITH_3DES_EDE_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0010 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_WITH_3DES_EDE_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0010 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0011
//! @SYMTestCaseDesc 	TLS handshake with TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA cipher suit
//!			(TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0011 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0011


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0012
//! @SYMTestCaseDesc 	TLS handshake with TLS_DHE_DSS_WITH_DES_CBC_SHA cipher suit
//!			(TLS_DHE_DSS_WITH_DES_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_DHE_DSS_WITH_DES_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_DHE_DSS_WITH_DES_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0012 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_DHE_DSS_WITH_DES_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0012 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0013
//! @SYMTestCaseDesc 	TLS handshake with TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA cipher suit
//!			(TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0013 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0013 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0014
//! @SYMTestCaseDesc 	TLS handshake with TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA cipher suit
//!			(TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0014 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0014 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0015
//! @SYMTestCaseDesc 	TLS handshake with TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA cipher suit
//!			(TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0015 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0015 

//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0016
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_WITH_AES_128_CBC_SHA cipher suit
//!			(TLS_RSA_WITH_AES_128_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_WITH_AES_128_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_WITH_AES_128_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0016 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_WITH_AES_128_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0016 


//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0017
//! @SYMTestCaseDesc 	TLS handshake with TLS_RSA_WITH_AES_256_CBC_SHA cipher suit
//!			(TLS_RSA_WITH_AES_256_CBC_SHA)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_RSA_WITH_AES_256_CBC_SHA cipher suit. 
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_RSA_WITH_AES_256_CBC_SHA is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0017 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_RSA_WITH_AES_256_CBC_SHA 
END_TESTCASE SEC-TLSP-SMOKE-0017 



//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0018
//! @SYMTestCaseDesc 	Usage of RFC3546 server name extension
//!			(SERVER_NAME_EXTENSION)
//! @SYMScriptPurpose  	To ensure that TLS provider can send server name extensions in TLS handshake.  
//!		
//! @SYMPREQ 		PREQ1294
//! @SYMREQ  		REQ8631
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using server name extensions.    
//!			Test Actions:
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with 
//!        TLS test server. 
//!     •  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!     •  Instruct test client to connect to TLS test server.
//!     •  Set test environment in a way that server name extensions is set in “ServerHello” message.
//!     •  Check that instance CSecureSocket was able to execute complete success handshake with test 
//!        server using the cipher suit specified. 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0018 
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini single_server_name
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini multiple_server_name
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini server_name_negative
END_TESTCASE SEC-TLSP-SMOKE-0018 






//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0019
//! @SYMTestCaseDesc 	TLS handshake with Null cipher suites
//!			(TLS_NULL_CIPHER_SMOKE_DEFECT)
//! @SYMScriptPurpose  	To ensure that TLS provider can execute a TLS handshake using a 
//!                    	TLS_NULL_CIPHER_NOCLIENT_AUT_RSA_MD5 or TLS_NULL_CIPHER_NOCLIENT_AUT_RSA_SHA cipher suites. 
//!		
//! @SYMDEF 		DEF114941
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestActions 	Preconditions:
//!	•  There is a TLS test server that can perform TLS handshakes using the cipher suit specific to this test.  
//!			Test Actions:
//!     •  Repeat sequence below including and not including identity hint in server hello message.
//!     •  Launch test client that uses instance of symbian CSecureSocket to negotiate handshake with TLS test server. 
//!	•  Set appropriate values to instance of TConnectSettings associated to instance of CSecureSocket.
//!	•  Instruct test client to connect to TLS test server.
//!	•  Set test environment in a way that TLS_NULL_CIPHER_NOCLIENT_AUT_RSA_MD5 is set in “ServerHello” message.
//!	•  Check that instance CSecureSocket was able to execute complete success handshake with test server 
//!	   using the cipher suit specified.
//!	•  Repeat test sequence using TLS_NULL_CIPHER_NOCLIENT_AUT_RSA_SHA 
//!
//! @SYMTestExpectedResults  • TLS handshake was complete and successful. 
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0019
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_NULL_CIPHER_NOCLIENT_AUT_RSA_MD5
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_NULL_CIPHER_NOCLIENT_AUT_RSA_SHA
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_NULL_SET_SUITES_ERROR
END_TESTCASE SEC-TLSP-SMOKE-0019

//! @SYMTestCaseID 	SEC-TLSP-SMOKE-0020
//! @SYMTestCaseDesc 	TLS handshake with no valid ciphersuites
//!			(TLS_NO_VALID_CIPHERSUITES)
//! @SYMScriptPurpose  	To ensure that SetAvailableCiphersuites fails with the correct code if all supplied ciphersuites are invalid.
//!		
//! @SYMDEF 		DEF116261
//! @SYMTestPriority 	Critical
//! @SYMTestStatus   	Implemented
//! @SYMTestExpectedResults  KErrNotSupported
//!
//! @SYMTestType 	CIT

START_TESTCASE SEC-TLSP-SMOKE-0020
RUN_TEST_STEP 100 tlstest2 HandShakeStep z:\tlstest2\scripts\tls_smoke.ini TLS_NO_VALID_CIPHERSUITES
END_TESTCASE SEC-TLSP-SMOKE-0020

RUN_UTILS DeleteFile c:\tlsprov_ethernetced.xml





